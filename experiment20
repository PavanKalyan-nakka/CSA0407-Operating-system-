#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

int data = 0;           // shared data
int readcount = 0;      // number of readers

sem_t mutex, wrt;       // mutex for readcount, wrt for writers

void* reader(void* arg) {
    int id = *((int*)arg);
    sem_wait(&mutex);
    readcount++;
    if(readcount == 1) sem_wait(&wrt); // first reader locks writer
    sem_post(&mutex);

    printf("Reader %d reading data: %d\n", id, data);
    sleep(1);

    sem_wait(&mutex);
    readcount--;
    if(readcount == 0) sem_post(&wrt); // last reader unlocks writer
    sem_post(&mutex);
    return NULL;
}

void* writer(void* arg) {
    int id = *((int*)arg);
    sem_wait(&wrt);  // exclusive access
    data += 10;      // modify shared data
    printf("Writer %d wrote data: %d\n", id, data);
    sleep(1);
    sem_post(&wrt);
    return NULL;
}

int main() {
    pthread_t r[3], w[2];
    int ids_r[3] = {1,2,3};
    int ids_w[2] = {1,2};

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    pthread_create(&r[0], NULL, reader, &ids_r[0]);
    pthread_create(&w[0], NULL, writer, &ids_w[0]);
    pthread_create(&r[1], NULL, reader, &ids_r[1]);
    pthread_create(&w[1], NULL, writer, &ids_w[1]);
    pthread_create(&r[2], NULL, reader, &ids_r[2]);

    for(int i=0;i<3;i++) pthread_join(r[i], NULL);
    for(int i=0;i<2;i++) pthread_join(w[i], NULL);

    sem_destroy(&mutex);
    sem_destroy(&wrt);
    return 0;
}
